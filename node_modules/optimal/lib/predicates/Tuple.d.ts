import Predicate from '../Predicate';
export declare type InferTupleContents<T> = T extends [infer A, infer B, infer C, infer D, infer E] ? [Predicate<A>, Predicate<B>, Predicate<C>, Predicate<D>, Predicate<E>] : T extends [infer A, infer B, infer C, infer D] ? [Predicate<A>, Predicate<B>, Predicate<C>, Predicate<D>] : T extends [infer A, infer B, infer C] ? [Predicate<A>, Predicate<B>, Predicate<C>] : T extends [infer A, infer B] ? [Predicate<A>, Predicate<B>] : T extends [infer A] ? [Predicate<A>] : never;
export default class TuplePredicate<T extends unknown[] = unknown[]> extends Predicate<T> {
    protected contents: InferTupleContents<T>;
    constructor(contents: InferTupleContents<T>);
    default(): T;
    /**
     * Return the type name as an array of type items.
     */
    typeAlias(): string;
    protected doRun(value: T, path: string): T;
}
export declare function tuple<T extends unknown[] = unknown[]>(contents: InferTupleContents<T>): TuplePredicate<T>;
