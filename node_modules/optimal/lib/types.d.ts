import Predicate from './Predicate';
import Schema from './Schema';
export declare type ArrayOf<T> = T[];
export declare type FuncOf = (...args: unknown[]) => unknown;
export declare type ObjectOf<T, Keys extends string = string> = {
    [K in Keys]: T;
};
export declare type Blueprint<Struct extends object> = {
    [K in keyof Struct]-?: Predicate<Struct[K]>;
};
export declare type CheckerCallback<T = any> = (path: string, value: T) => unknown;
export declare type CustomCallback<T, S extends object = object> = (value: T, schema: Schema<S>) => void;
export declare type DefaultValueFactory<T> = (struct: any) => T;
export declare type DefaultValue<T> = T | DefaultValueFactory<T> | null;
export declare type NonUndefined<T> = T extends undefined ? never : T;
export interface OptimalOptions {
    file?: string;
    name?: string;
    prefix?: string;
    unknown?: boolean;
}
export declare type SupportedType = 'array' | 'boolean' | 'custom' | 'function' | 'instance' | 'number' | 'object' | 'shape' | 'string' | 'tuple' | 'union' | 'unknown';
