"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i18next_1 = __importDefault(require("i18next"));
const common_1 = require("@boost/common");
const internal_1 = require("@boost/internal");
const LocaleDetector_1 = __importDefault(require("./LocaleDetector"));
const FileBackend_1 = __importDefault(require("./FileBackend"));
const constants_1 = require("./constants");
// istanbul ignore next
function handleError(error) {
    if (error) {
        throw error;
    }
}
function createTranslator(namespace, resourcePath, { autoDetect = true, debug: debugOpt = false, fallbackLocale = 'en', locale, lookupType, resourceFormat = 'yaml', } = {}) {
    const namespaces = common_1.toArray(namespace);
    const resourcePaths = common_1.toArray(resourcePath).map(common_1.Path.create);
    if (namespaces.length === 0) {
        throw new internal_1.RuntimeError('translate', 'TL_REQ_NAMESPACE');
    }
    else if (resourcePaths.length === 0) {
        throw new internal_1.RuntimeError('translate', 'TL_REQ_RES_PATHS');
    }
    else if (!autoDetect && !locale) {
        throw new internal_1.RuntimeError('translate', 'TL_REQ_MANUAL_LOCALE');
    }
    constants_1.debug('New translator created: %s namespace(s)', namespaces.join(', '));
    const translator = i18next_1.default.createInstance().use(new FileBackend_1.default());
    if (autoDetect) {
        translator.use(new LocaleDetector_1.default());
    }
    translator.init({
        backend: {
            format: resourceFormat,
            paths: resourcePaths,
        },
        debug: debugOpt,
        defaultNS: namespaces[0],
        fallbackLng: fallbackLocale,
        initImmediate: false,
        lng: locale,
        load: lookupType,
        lowerCaseLng: true,
        ns: namespaces,
        returnNull: false,
    }, handleError);
    function msg(key, params, _a = {}) {
        var { interpolation, locale: lng } = _a, options = __rest(_a, ["interpolation", "locale"]);
        return translator.t(key, Object.assign(Object.assign({ interpolation: Object.assign({ escapeValue: false }, interpolation) }, options), { lng, replace: params }));
    }
    msg.dir = translator.dir();
    msg.locale = translator.language;
    msg.changeLocale = (lang) => {
        constants_1.debug('Locale manually changed to "%s"', lang);
        translator.changeLanguage(lang, error => {
            handleError(error);
            msg.dir = translator.dir();
            msg.locale = translator.language;
        });
    };
    if (process.env.NODE_ENV === 'test') {
        msg.i18n = translator;
    }
    return msg;
}
exports.default = createTranslator;
