"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const optimal_1 = __importStar(require("optimal"));
class Contract {
    constructor(options) {
        this.options = this.configure(options);
    }
    /**
     * Set an options object by merging the new partial and existing options
     * with the defined blueprint, while running all validation checks.
     * Freeze and return the options object.
     */
    configure(options) {
        const nextOptions = typeof options === 'function' ? options(this.options) : options;
        // We don't want the options property to be modified directly,
        // so it's read only, but we still want to modify it with this function.
        // @ts-ignore
        this.options = Object.freeze(optimal_1.default(Object.assign(Object.assign({}, this.options), nextOptions), this.blueprint(optimal_1.predicates), {
            name: this.constructor.name,
        }));
        return this.options;
    }
}
exports.default = Contract;
