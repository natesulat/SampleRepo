import Predicate from '../Predicate';
export declare type Constructor<T> = (new (...args: unknown[]) => T) | (Function & {
    prototype: T;
});
export default class InstancePredicate<T> extends Predicate<T | null> {
    protected loose: boolean;
    protected refClass: Constructor<T> | null;
    constructor(refClass?: Constructor<T> | null, loose?: boolean);
    /**
     * If reference class is defined, return the class name if available.
     */
    typeAlias(): string;
}
export declare function instance<T = Function>(refClass?: Constructor<T> | null, loose?: boolean): InstancePredicate<T>;
export declare function predicate<T = unknown>(): InstancePredicate<Predicate<T>>;
export declare function regex(): InstancePredicate<RegExp>;
export declare function date(): InstancePredicate<Date>;
