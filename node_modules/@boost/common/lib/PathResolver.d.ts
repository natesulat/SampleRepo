import { PortablePath, LookupType } from './types';
import Path from './Path';
export default class PathResolver {
    private lookups;
    /**
     * Return a list of all lookup paths.
     */
    getLookupPaths(): string[];
    /**
     * Add a file system path to look for, resolved against the defined current
     * working directory (or `process.cwd()` otherwise).
     */
    lookupFilePath(filePath: PortablePath, cwd?: PortablePath): this;
    /**
     * Add a Node.js module, either by name or relative path, to look for.
     */
    lookupNodeModule(modulePath: PortablePath): this;
    /**
     * Given a list of lookups, attempt to find the first real/existing path and
     * return a resolved absolute path. If a file system path, will check using `fs.exists`.
     * If a node module path, will check using `require.resolve`.
     */
    resolve(): {
        originalPath: Path;
        resolvedPath: Path;
        type: LookupType;
    };
    /**
     * Like `resolve()` but only returns the resolved path.
     */
    resolvePath(): Path;
}
//# sourceMappingURL=PathResolver.d.ts.map