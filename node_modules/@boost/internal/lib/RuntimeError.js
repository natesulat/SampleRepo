"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const messageCache = new Map();
class RuntimeError extends Error {
    constructor(moduleName, code, params) {
        super(RuntimeError.loadMessageForCode(moduleName, code, params));
        this.code = code;
        this.module = moduleName;
        this.name = 'RuntimeError';
        // If a message was not loaded, we are throwing an unknown error
        if (!this.message) {
            this.code = 'UNKNOWN_ERROR';
            this.message = RuntimeError.loadMessageForCode('internal', 'UNKNOWN_ERROR');
        }
    }
    static loadMessageForCode(moduleName, code, params = []) {
        let data = {};
        if (messageCache.has(moduleName)) {
            data = messageCache.get(moduleName);
        }
        else {
            try {
                // eslint-disable-next-line
                data = require(`@boost/${moduleName}/res/errors.json`);
            }
            catch (_a) {
                // Do nothing
            }
            messageCache.set(moduleName, data);
        }
        return data[code] ? util_1.default.format(data[code], ...params) : '';
    }
}
exports.default = RuntimeError;
