import CollectionPredicate from './Collection';
import Predicate from '../Predicate';
import { ObjectOf, DefaultValue } from '../types';
export default class ObjectPredicate<T, K extends string = string> extends CollectionPredicate<ObjectOf<T, K>> {
    protected contents: Predicate<T> | null;
    constructor(contents?: Predicate<T> | null, defaultValue?: DefaultValue<ObjectOf<T, K>>);
    cast(value: unknown): ObjectOf<T, K>;
    notEmpty(): this;
    /**
     * If contents are defined, return the type name using generics syntax.
     */
    typeAlias(): string;
}
export declare function object<T = unknown, K extends string = string>(contents?: Predicate<T> | null, defaultValue?: DefaultValue<ObjectOf<T, K>>): ObjectPredicate<T, K>;
export declare function blueprint<T = unknown, K extends string = string>(defaultValue?: DefaultValue<ObjectOf<Predicate<T>, K>>): ObjectPredicate<Predicate<T>, K>;
