import CollectionPredicate from './Collection';
import Predicate from '../Predicate';
import { ArrayOf, DefaultValue } from '../types';
export default class ArrayPredicate<T> extends CollectionPredicate<ArrayOf<T>> {
    protected contents: Predicate<T> | null;
    constructor(contents?: Predicate<T> | null, defaultValue?: DefaultValue<ArrayOf<T>>);
    cast(value: unknown): ArrayOf<T>;
    notEmpty(): this;
    /**
     * If contents are defined, return the type name using generics syntax.
     */
    typeAlias(): string;
}
export declare function array<T = unknown>(contents?: Predicate<T> | null, defaultValue?: DefaultValue<ArrayOf<T>>): ArrayPredicate<T>;
