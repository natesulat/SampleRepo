import { Blueprint, Predicates } from 'optimal';
import Path from './Path';
export declare type ModuleName = string;
export declare type FilePath = string;
export declare type PortablePath = FilePath | Path;
export declare enum LookupType {
    FILE_SYSTEM = "FILE_SYSTEM",
    NODE_MODULE = "NODE_MODULE"
}
export interface Lookup {
    path: Path;
    raw: Path;
    type: LookupType;
}
export declare type AbstractConstructor<T> = Function & {
    prototype: T;
};
export declare type ConcreteConstructor<T> = new (...args: unknown[]) => T;
export declare type Constructor<T> = AbstractConstructor<T> | ConcreteConstructor<T>;
export declare type BlueprintFactory<T extends object> = (predicates: Predicates) => Blueprint<T>;
export interface Optionable<T extends object = {}> {
    readonly options: Required<T>;
    blueprint: BlueprintFactory<T>;
}
export interface Toolable {
    name: string;
}
export interface BugSetting {
    url?: string;
    email?: string;
}
export interface TypeSetting {
    type: string;
    url: string;
}
export interface PeopleSetting {
    name: string;
    email?: string;
    url?: string;
}
export interface SettingMap {
    [key: string]: string;
}
export interface DependencyMap {
    [module: string]: string;
}
export interface PackageStructure {
    author?: string | PeopleSetting;
    bin?: string | SettingMap;
    browser?: string;
    browserslist?: string[];
    bugs?: string | BugSetting;
    bundledDependencies?: string[];
    config?: SettingMap;
    contributors?: string[] | PeopleSetting[];
    cpu?: string[];
    dependencies?: DependencyMap;
    description?: string;
    devDependencies?: DependencyMap;
    directories?: SettingMap;
    engines?: SettingMap;
    exports?: {
        [path: string]: string | string[] | SettingMap;
    };
    files?: string[];
    homepage?: string;
    keywords?: string[];
    license?: string | TypeSetting | TypeSetting[];
    main?: string;
    man?: string | string[];
    name: string;
    optionalDependencies?: DependencyMap;
    os?: string[];
    peerDependencies?: DependencyMap;
    private?: boolean;
    publishConfig?: {
        access?: 'public' | 'restricted';
        registry?: string;
        tag?: string;
    };
    repository?: string | TypeSetting;
    scripts?: SettingMap;
    type?: 'commonjs' | 'module';
    version: string;
    types?: string;
    typesVersions?: {
        [version: string]: {
            [glob: string]: string[];
        };
    };
    typings?: string;
    module?: string;
    sideEffects?: boolean | string[];
    workspaces?: string[] | {
        packages?: string[];
        nohoist?: string[];
    };
}
//# sourceMappingURL=types.d.ts.map