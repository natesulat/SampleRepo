"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_locale_1 = __importDefault(require("os-locale"));
const constants_1 = require("./constants");
class LocaleDetector {
    constructor() {
        this.locale = 'en';
        this.type = 'languageDetector';
    }
    init() {
        // We don't need this but is required by the interface
    }
    cacheUserLanguage(locale) {
        this.locale = locale;
    }
    detect() {
        if (this.locale) {
            constants_1.debug('Locale "%s" manually provided', this.locale);
            return this.locale;
        }
        return this.detectFromArgv() || this.detectFromOS();
    }
    detectFromArgv() {
        const args = process.argv;
        const index = args.findIndex(arg => arg === '--locale');
        const nextIndex = index + 1;
        if (index >= 0 && args[nextIndex] && !args[nextIndex].startsWith('-')) {
            const locale = args[nextIndex];
            constants_1.debug('Locale "%s" detected from --locale option', locale);
            return locale;
        }
        return undefined;
    }
    detectFromOS() {
        const locale = os_locale_1.default.sync().replace(/_/gu, '-');
        constants_1.debug('Locale "%s" detected from operating system', locale);
        return locale;
    }
}
exports.default = LocaleDetector;
